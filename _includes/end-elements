{% comment %}
After this comment block, include any links and scripts
that you want just before the </body> tag in your HTML.
Use Liquid logic tags to include only in certain outputs, e.g.
`if site.output == "web"` for scripts like search.js.
{% endcomment %}

{% comment %}
These scripts provide client-side search. See:
http://elasticlunr.com/
https://markjs.io/
{% endcomment %}
{% if site.output == "web" or site.output == "app" %}

    <script src="{{ path-to-root-directory }}assets/js/bundle.js"></script>

    {% if is-series-search or is-book-search %}
        {% if site.data.settings.search-type == "elasticlunr" or site.output == "app" %}

        <script>
            if (searchTerm) {
                // display the placeholder
                // we do this here because we can't wait for locales.js
                // and bundle-search to load it. Sorry about the hack.
                var searchResultsContainer = document.getElementById('search-results');
                if (searchResultsContainer) {
                    searchResultsContainer.innerHTML = '<p>' + locales[pageLanguage].search['placeholder-searching'] + '</p>';
                }
            }
        </script>
        <script src="{{ path-to-root-directory }}assets/js/bundle-search.js"></script>

        {% endif %}
    {% endif %}

{% endif %}

{% if site.output == "print-pdf" or site.output == "screen-pdf" %}

    {% comment %}
    This script gives every heading a title attribute.
    This is useful to Prince, which can use title attributes for running heads.
    By default, we only load it for PDF outputs.
    {% endcomment %}
    <script src="{{ path-to-root-directory }}assets/js/heading-titles.min.js"></script>

    {% comment %}
    This script moves footnotes generated by kramdown from the end of the page
    up to the reference point.
    {% endcomment %}
    <script src="{{ path-to-root-directory }}/assets/js/footnotes_pdf.min.js"></script>

    {% comment %}This script detects the page number we're on and provides
    the relevant page cross-reference text as generated content.{% endcomment %}
    <script src="{{ path-to-root-directory }}/assets/js/page-reference.js"></script>

    {% comment %}This script lets us bump en element up the DOM,
    for instance if we want an element to appear in the sidebar
    beside the element that it follows in the DOM.{% endcomment %}
    <script src="{{ path-to-root-directory }}/assets/js/bump.js"></script>

{% endif %}

{% if site.output == "screen-pdf" %}
    {% comment %}We're using this temporarily to create image-review docs
    with screen-pdf output. Removes everything except image divs.{% endcomment %}
    <script src="{{ path-to-root-directory }}/assets/js/images-only.js"></script>
{% endif %}

{% comment %}Localisation of Javascript-driven text{% endcomment %}
{% if site.output == "web" or site.output == "app" %}

    {% comment %}Localise question-answer feedback prompts{% endcomment %}
    <style>
        .js-mcq .mcq-correct .mcq-feedback:before {
            content: "{{ locale.questions.feedback-correct }}";
        }
        .js-mcq .mcq-incorrect .mcq-feedback:before {
            content: "{{ locale.questions.feedback-incorrect }}";
        }
        .js-mcq .mcq-partially-correct .mcq-feedback:before {
            content: "{{ locale.questions.feedback-unfinished }}";
        }
    </style>
{% endif %}

{% if site.output == "epub" %}
    <script src="../js/bundle.js"></script>
{% endif %}
